                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module PID
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _PIDController_Init
                                     12 	.globl _PIDController_Update
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 
                                     26 ; default segment ordering for linker
                                     27 	.area HOME
                                     28 	.area GSINIT
                                     29 	.area GSFINAL
                                     30 	.area CONST
                                     31 	.area INITIALIZER
                                     32 	.area CODE
                                     33 
                                     34 ;--------------------------------------------------------
                                     35 ; global & static initialisations
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
                                     38 	.area GSINIT
                                     39 	.area GSFINAL
                                     40 	.area GSINIT
                                     41 ;--------------------------------------------------------
                                     42 ; Home
                                     43 ;--------------------------------------------------------
                                     44 	.area HOME
                                     45 	.area HOME
                                     46 ;--------------------------------------------------------
                                     47 ; code
                                     48 ;--------------------------------------------------------
                                     49 	.area CODE
                                     50 ;	PID.c: 4: void PIDController_Init(PIDController *pid) {
                                     51 ;	-----------------------------------------
                                     52 ;	 function PIDController_Init
                                     53 ;	-----------------------------------------
      000000                         54 _PIDController_Init:
                                     55 ;	PID.c: 7: pid->integrator = 0.0f;
      000000 16 03            [ 2]   56 	ldw	y, (0x03, sp)
      000002 93               [ 1]   57 	ldw	x, y
      000003 1C 00 24         [ 2]   58 	addw	x, #0x0024
      000006 6F 03            [ 1]   59 	clr	(0x3, x)
      000008 6F 02            [ 1]   60 	clr	(0x2, x)
      00000A 6F 01            [ 1]   61 	clr	(0x1, x)
      00000C 7F               [ 1]   62 	clr	(x)
                                     63 ;	PID.c: 8: pid->prevError  = 0.0f;
      00000D 93               [ 1]   64 	ldw	x, y
      00000E 1C 00 28         [ 2]   65 	addw	x, #0x0028
      000011 6F 03            [ 1]   66 	clr	(0x3, x)
      000013 6F 02            [ 1]   67 	clr	(0x2, x)
      000015 6F 01            [ 1]   68 	clr	(0x1, x)
      000017 7F               [ 1]   69 	clr	(x)
                                     70 ;	PID.c: 10: pid->differentiator  = 0.0f;
      000018 93               [ 1]   71 	ldw	x, y
      000019 1C 00 2C         [ 2]   72 	addw	x, #0x002c
      00001C 6F 03            [ 1]   73 	clr	(0x3, x)
      00001E 6F 02            [ 1]   74 	clr	(0x2, x)
      000020 6F 01            [ 1]   75 	clr	(0x1, x)
      000022 7F               [ 1]   76 	clr	(x)
                                     77 ;	PID.c: 11: pid->prevMeasurement = 0.0f;
      000023 93               [ 1]   78 	ldw	x, y
      000024 1C 00 30         [ 2]   79 	addw	x, #0x0030
      000027 6F 03            [ 1]   80 	clr	(0x3, x)
      000029 6F 02            [ 1]   81 	clr	(0x2, x)
      00002B 6F 01            [ 1]   82 	clr	(0x1, x)
      00002D 7F               [ 1]   83 	clr	(x)
                                     84 ;	PID.c: 13: pid->out = 0.0f;
      00002E 93               [ 1]   85 	ldw	x, y
      00002F 1C 00 34         [ 2]   86 	addw	x, #0x0034
      000032 6F 03            [ 1]   87 	clr	(0x3, x)
      000034 6F 02            [ 1]   88 	clr	(0x2, x)
      000036 6F 01            [ 1]   89 	clr	(0x1, x)
      000038 7F               [ 1]   90 	clr	(x)
                                     91 ;	PID.c: 15: }
      000039 81               [ 4]   92 	ret
                                     93 ;	PID.c: 17: float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
                                     94 ;	-----------------------------------------
                                     95 ;	 function PIDController_Update
                                     96 ;	-----------------------------------------
      00003A                         97 _PIDController_Update:
      00003A 52 75            [ 2]   98 	sub	sp, #117
                                     99 ;	PID.c: 22: float error = setpoint - measurement;
      00003C 1E 80            [ 2]  100 	ldw	x, (0x80, sp)
      00003E 89               [ 2]  101 	pushw	x
      00003F 1E 80            [ 2]  102 	ldw	x, (0x80, sp)
      000041 89               [ 2]  103 	pushw	x
      000042 1E 80            [ 2]  104 	ldw	x, (0x80, sp)
      000044 89               [ 2]  105 	pushw	x
      000045 1E 80            [ 2]  106 	ldw	x, (0x80, sp)
      000047 89               [ 2]  107 	pushw	x
      000048 CDr00r00         [ 4]  108 	call	___fssub
      00004B 5B 08            [ 2]  109 	addw	sp, #8
      00004D 1F 70            [ 2]  110 	ldw	(0x70, sp), x
      00004F 17 6E            [ 2]  111 	ldw	(0x6e, sp), y
                                    112 ;	PID.c: 28: float proportional = pid->Kp * error;
      000051 16 78            [ 2]  113 	ldw	y, (0x78, sp)
      000053 17 6C            [ 2]  114 	ldw	(0x6c, sp), y
      000055 93               [ 1]  115 	ldw	x, y
      000056 90 EE 02         [ 2]  116 	ldw	y, (0x2, y)
      000059 FE               [ 2]  117 	ldw	x, (x)
      00005A 1F 30            [ 2]  118 	ldw	(0x30, sp), x
      00005C 1E 70            [ 2]  119 	ldw	x, (0x70, sp)
      00005E 89               [ 2]  120 	pushw	x
      00005F 1E 70            [ 2]  121 	ldw	x, (0x70, sp)
      000061 89               [ 2]  122 	pushw	x
      000062 90 89            [ 2]  123 	pushw	y
      000064 1E 36            [ 2]  124 	ldw	x, (0x36, sp)
      000066 89               [ 2]  125 	pushw	x
      000067 CDr00r00         [ 4]  126 	call	___fsmul
      00006A 5B 08            [ 2]  127 	addw	sp, #8
      00006C 1F 74            [ 2]  128 	ldw	(0x74, sp), x
      00006E 17 72            [ 2]  129 	ldw	(0x72, sp), y
                                    130 ;	PID.c: 34: pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
      000070 1E 6C            [ 2]  131 	ldw	x, (0x6c, sp)
      000072 1C 00 24         [ 2]  132 	addw	x, #0x0024
      000075 1F 2E            [ 2]  133 	ldw	(0x2e, sp), x
      000077 E6 03            [ 1]  134 	ld	a, (0x3, x)
      000079 6B 08            [ 1]  135 	ld	(0x08, sp), a
      00007B E6 02            [ 1]  136 	ld	a, (0x2, x)
      00007D 6B 07            [ 1]  137 	ld	(0x07, sp), a
      00007F FE               [ 2]  138 	ldw	x, (x)
      000080 1F 05            [ 2]  139 	ldw	(0x05, sp), x
      000082 1E 6C            [ 2]  140 	ldw	x, (0x6c, sp)
      000084 90 93            [ 1]  141 	ldw	y, x
      000086 90 EE 06         [ 2]  142 	ldw	y, (0x6, y)
      000089 EE 04            [ 2]  143 	ldw	x, (0x4, x)
      00008B 90 89            [ 2]  144 	pushw	y
      00008D 89               [ 2]  145 	pushw	x
      00008E 5F               [ 1]  146 	clrw	x
      00008F 89               [ 2]  147 	pushw	x
      000090 4B 00            [ 1]  148 	push	#0x00
      000092 4B 3F            [ 1]  149 	push	#0x3f
      000094 CDr00r00         [ 4]  150 	call	___fsmul
      000097 5B 08            [ 2]  151 	addw	sp, #8
      000099 1F 03            [ 2]  152 	ldw	(0x03, sp), x
      00009B 17 01            [ 2]  153 	ldw	(0x01, sp), y
      00009D 1E 6C            [ 2]  154 	ldw	x, (0x6c, sp)
      00009F 1C 00 20         [ 2]  155 	addw	x, #0x0020
      0000A2 1F 3E            [ 2]  156 	ldw	(0x3e, sp), x
      0000A4 90 93            [ 1]  157 	ldw	y, x
      0000A6 90 EE 02         [ 2]  158 	ldw	y, (0x2, y)
      0000A9 FE               [ 2]  159 	ldw	x, (x)
      0000AA 90 89            [ 2]  160 	pushw	y
      0000AC 89               [ 2]  161 	pushw	x
      0000AD 1E 07            [ 2]  162 	ldw	x, (0x07, sp)
      0000AF 89               [ 2]  163 	pushw	x
      0000B0 1E 07            [ 2]  164 	ldw	x, (0x07, sp)
      0000B2 89               [ 2]  165 	pushw	x
      0000B3 CDr00r00         [ 4]  166 	call	___fsmul
      0000B6 5B 08            [ 2]  167 	addw	sp, #8
      0000B8 1F 3C            [ 2]  168 	ldw	(0x3c, sp), x
      0000BA 17 3A            [ 2]  169 	ldw	(0x3a, sp), y
      0000BC 1E 6C            [ 2]  170 	ldw	x, (0x6c, sp)
      0000BE 1C 00 28         [ 2]  171 	addw	x, #0x0028
      0000C1 1F 38            [ 2]  172 	ldw	(0x38, sp), x
      0000C3 90 93            [ 1]  173 	ldw	y, x
      0000C5 90 EE 02         [ 2]  174 	ldw	y, (0x2, y)
      0000C8 FE               [ 2]  175 	ldw	x, (x)
      0000C9 90 89            [ 2]  176 	pushw	y
      0000CB 89               [ 2]  177 	pushw	x
      0000CC 1E 74            [ 2]  178 	ldw	x, (0x74, sp)
      0000CE 89               [ 2]  179 	pushw	x
      0000CF 1E 74            [ 2]  180 	ldw	x, (0x74, sp)
      0000D1 89               [ 2]  181 	pushw	x
      0000D2 CDr00r00         [ 4]  182 	call	___fsadd
      0000D5 5B 08            [ 2]  183 	addw	sp, #8
      0000D7 89               [ 2]  184 	pushw	x
      0000D8 90 89            [ 2]  185 	pushw	y
      0000DA 1E 40            [ 2]  186 	ldw	x, (0x40, sp)
      0000DC 89               [ 2]  187 	pushw	x
      0000DD 1E 40            [ 2]  188 	ldw	x, (0x40, sp)
      0000DF 89               [ 2]  189 	pushw	x
      0000E0 CDr00r00         [ 4]  190 	call	___fsmul
      0000E3 5B 08            [ 2]  191 	addw	sp, #8
      0000E5 89               [ 2]  192 	pushw	x
      0000E6 90 89            [ 2]  193 	pushw	y
      0000E8 1E 0B            [ 2]  194 	ldw	x, (0x0b, sp)
      0000EA 89               [ 2]  195 	pushw	x
      0000EB 1E 0B            [ 2]  196 	ldw	x, (0x0b, sp)
      0000ED 89               [ 2]  197 	pushw	x
      0000EE CDr00r00         [ 4]  198 	call	___fsadd
      0000F1 5B 08            [ 2]  199 	addw	sp, #8
      0000F3 1F 36            [ 2]  200 	ldw	(0x36, sp), x
      0000F5 1E 2E            [ 2]  201 	ldw	x, (0x2e, sp)
      0000F7 7B 37            [ 1]  202 	ld	a, (0x37, sp)
      0000F9 E7 03            [ 1]  203 	ld	(0x3, x), a
      0000FB 7B 36            [ 1]  204 	ld	a, (0x36, sp)
      0000FD E7 02            [ 1]  205 	ld	(0x2, x), a
      0000FF FF               [ 2]  206 	ldw	(x), y
                                    207 ;	PID.c: 37: if (pid->integrator > pid->limMaxInt) {
      000100 1E 2E            [ 2]  208 	ldw	x, (0x2e, sp)
      000102 E6 03            [ 1]  209 	ld	a, (0x3, x)
      000104 6B 4D            [ 1]  210 	ld	(0x4d, sp), a
      000106 E6 02            [ 1]  211 	ld	a, (0x2, x)
      000108 6B 4C            [ 1]  212 	ld	(0x4c, sp), a
      00010A FE               [ 2]  213 	ldw	x, (x)
      00010B 1F 4A            [ 2]  214 	ldw	(0x4a, sp), x
      00010D 1E 6C            [ 2]  215 	ldw	x, (0x6c, sp)
      00010F E6 1F            [ 1]  216 	ld	a, (0x1f, x)
      000111 6B 49            [ 1]  217 	ld	(0x49, sp), a
      000113 E6 1E            [ 1]  218 	ld	a, (0x1e, x)
      000115 6B 48            [ 1]  219 	ld	(0x48, sp), a
      000117 EE 1C            [ 2]  220 	ldw	x, (0x1c, x)
      000119 1F 46            [ 2]  221 	ldw	(0x46, sp), x
      00011B 1E 36            [ 2]  222 	ldw	x, (0x36, sp)
      00011D 89               [ 2]  223 	pushw	x
      00011E 90 89            [ 2]  224 	pushw	y
      000120 1E 4C            [ 2]  225 	ldw	x, (0x4c, sp)
      000122 89               [ 2]  226 	pushw	x
      000123 1E 4C            [ 2]  227 	ldw	x, (0x4c, sp)
      000125 89               [ 2]  228 	pushw	x
      000126 CDr00r00         [ 4]  229 	call	___fslt
      000129 5B 08            [ 2]  230 	addw	sp, #8
      00012B 4D               [ 1]  231 	tnz	a
      00012C 27 0B            [ 1]  232 	jreq	00104$
                                    233 ;	PID.c: 39: pid->integrator = pid->limMaxInt;
      00012E 1E 2E            [ 2]  234 	ldw	x, (0x2e, sp)
      000130 16 48            [ 2]  235 	ldw	y, (0x48, sp)
      000132 EF 02            [ 2]  236 	ldw	(0x2, x), y
      000134 16 46            [ 2]  237 	ldw	y, (0x46, sp)
      000136 FF               [ 2]  238 	ldw	(x), y
      000137 20 29            [ 2]  239 	jra	00105$
      000139                        240 00104$:
                                    241 ;	PID.c: 41: } else if (pid->integrator < pid->limMinInt) {
      000139 1E 6C            [ 2]  242 	ldw	x, (0x6c, sp)
      00013B 90 93            [ 1]  243 	ldw	y, x
      00013D 90 EE 1A         [ 2]  244 	ldw	y, (0x1a, y)
      000140 EE 18            [ 2]  245 	ldw	x, (0x18, x)
      000142 1F 42            [ 2]  246 	ldw	(0x42, sp), x
      000144 90 89            [ 2]  247 	pushw	y
      000146 90 89            [ 2]  248 	pushw	y
      000148 1E 46            [ 2]  249 	ldw	x, (0x46, sp)
      00014A 89               [ 2]  250 	pushw	x
      00014B 1E 52            [ 2]  251 	ldw	x, (0x52, sp)
      00014D 89               [ 2]  252 	pushw	x
      00014E 1E 52            [ 2]  253 	ldw	x, (0x52, sp)
      000150 89               [ 2]  254 	pushw	x
      000151 CDr00r00         [ 4]  255 	call	___fslt
      000154 5B 08            [ 2]  256 	addw	sp, #8
      000156 90 85            [ 2]  257 	popw	y
      000158 4D               [ 1]  258 	tnz	a
      000159 27 07            [ 1]  259 	jreq	00105$
                                    260 ;	PID.c: 43: pid->integrator = pid->limMinInt;
      00015B 1E 2E            [ 2]  261 	ldw	x, (0x2e, sp)
      00015D EF 02            [ 2]  262 	ldw	(0x2, x), y
      00015F 16 42            [ 2]  263 	ldw	y, (0x42, sp)
      000161 FF               [ 2]  264 	ldw	(x), y
      000162                        265 00105$:
                                    266 ;	PID.c: 52: pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
      000162 1E 6C            [ 2]  267 	ldw	x, (0x6c, sp)
      000164 1C 00 2C         [ 2]  268 	addw	x, #0x002c
      000167 1F 40            [ 2]  269 	ldw	(0x40, sp), x
      000169 1E 6C            [ 2]  270 	ldw	x, (0x6c, sp)
      00016B 90 93            [ 1]  271 	ldw	y, x
      00016D 90 EE 0A         [ 2]  272 	ldw	y, (0xa, y)
      000170 EE 08            [ 2]  273 	ldw	x, (0x8, x)
      000172 90 89            [ 2]  274 	pushw	y
      000174 89               [ 2]  275 	pushw	x
      000175 5F               [ 1]  276 	clrw	x
      000176 89               [ 2]  277 	pushw	x
      000177 4B 00            [ 1]  278 	push	#0x00
      000179 4B 40            [ 1]  279 	push	#0x40
      00017B CDr00r00         [ 4]  280 	call	___fsmul
      00017E 5B 08            [ 2]  281 	addw	sp, #8
      000180 1F 6A            [ 2]  282 	ldw	(0x6a, sp), x
      000182 17 68            [ 2]  283 	ldw	(0x68, sp), y
      000184 1E 6C            [ 2]  284 	ldw	x, (0x6c, sp)
      000186 1C 00 30         [ 2]  285 	addw	x, #0x0030
      000189 1F 66            [ 2]  286 	ldw	(0x66, sp), x
      00018B 90 93            [ 1]  287 	ldw	y, x
      00018D 90 EE 02         [ 2]  288 	ldw	y, (0x2, y)
      000190 FE               [ 2]  289 	ldw	x, (x)
      000191 90 89            [ 2]  290 	pushw	y
      000193 89               [ 2]  291 	pushw	x
      000194 1E 84            [ 2]  292 	ldw	x, (0x84, sp)
      000196 89               [ 2]  293 	pushw	x
      000197 1E 84            [ 2]  294 	ldw	x, (0x84, sp)
      000199 89               [ 2]  295 	pushw	x
      00019A CDr00r00         [ 4]  296 	call	___fssub
      00019D 5B 08            [ 2]  297 	addw	sp, #8
      00019F 89               [ 2]  298 	pushw	x
      0001A0 90 89            [ 2]  299 	pushw	y
      0001A2 1E 6E            [ 2]  300 	ldw	x, (0x6e, sp)
      0001A4 89               [ 2]  301 	pushw	x
      0001A5 1E 6E            [ 2]  302 	ldw	x, (0x6e, sp)
      0001A7 89               [ 2]  303 	pushw	x
                                    304 ;	PID.c: 53: + (2.0f * pid->tau - pid->T) * pid->differentiator)
      0001A8 CDr00r00         [ 4]  305 	call	___fsmul
      0001AB 5B 08            [ 2]  306 	addw	sp, #8
      0001AD 1F 64            [ 2]  307 	ldw	(0x64, sp), x
      0001AF 17 62            [ 2]  308 	ldw	(0x62, sp), y
      0001B1 1E 6C            [ 2]  309 	ldw	x, (0x6c, sp)
      0001B3 90 93            [ 1]  310 	ldw	y, x
      0001B5 90 EE 0E         [ 2]  311 	ldw	y, (0xe, y)
      0001B8 EE 0C            [ 2]  312 	ldw	x, (0xc, x)
      0001BA 90 89            [ 2]  313 	pushw	y
      0001BC 89               [ 2]  314 	pushw	x
      0001BD 5F               [ 1]  315 	clrw	x
      0001BE 89               [ 2]  316 	pushw	x
      0001BF 4B 00            [ 1]  317 	push	#0x00
      0001C1 4B 40            [ 1]  318 	push	#0x40
      0001C3 CDr00r00         [ 4]  319 	call	___fsmul
      0001C6 5B 08            [ 2]  320 	addw	sp, #8
      0001C8 1F 60            [ 2]  321 	ldw	(0x60, sp), x
      0001CA 17 5E            [ 2]  322 	ldw	(0x5e, sp), y
      0001CC 1E 3E            [ 2]  323 	ldw	x, (0x3e, sp)
      0001CE E6 03            [ 1]  324 	ld	a, (0x3, x)
      0001D0 6B 5D            [ 1]  325 	ld	(0x5d, sp), a
      0001D2 E6 02            [ 1]  326 	ld	a, (0x2, x)
      0001D4 6B 5C            [ 1]  327 	ld	(0x5c, sp), a
      0001D6 FE               [ 2]  328 	ldw	x, (x)
      0001D7 1F 5A            [ 2]  329 	ldw	(0x5a, sp), x
      0001D9 1E 5C            [ 2]  330 	ldw	x, (0x5c, sp)
      0001DB 89               [ 2]  331 	pushw	x
      0001DC 1E 5C            [ 2]  332 	ldw	x, (0x5c, sp)
      0001DE 89               [ 2]  333 	pushw	x
      0001DF 1E 64            [ 2]  334 	ldw	x, (0x64, sp)
      0001E1 89               [ 2]  335 	pushw	x
      0001E2 1E 64            [ 2]  336 	ldw	x, (0x64, sp)
      0001E4 89               [ 2]  337 	pushw	x
      0001E5 CDr00r00         [ 4]  338 	call	___fssub
      0001E8 5B 08            [ 2]  339 	addw	sp, #8
      0001EA 1F 58            [ 2]  340 	ldw	(0x58, sp), x
      0001EC 1E 40            [ 2]  341 	ldw	x, (0x40, sp)
      0001EE E6 03            [ 1]  342 	ld	a, (0x3, x)
      0001F0 6B 55            [ 1]  343 	ld	(0x55, sp), a
      0001F2 E6 02            [ 1]  344 	ld	a, (0x2, x)
      0001F4 6B 54            [ 1]  345 	ld	(0x54, sp), a
      0001F6 FE               [ 2]  346 	ldw	x, (x)
      0001F7 7B 55            [ 1]  347 	ld	a, (0x55, sp)
      0001F9 88               [ 1]  348 	push	a
      0001FA 7B 55            [ 1]  349 	ld	a, (0x55, sp)
      0001FC 88               [ 1]  350 	push	a
      0001FD 89               [ 2]  351 	pushw	x
      0001FE 1E 5C            [ 2]  352 	ldw	x, (0x5c, sp)
      000200 89               [ 2]  353 	pushw	x
      000201 90 89            [ 2]  354 	pushw	y
      000203 CDr00r00         [ 4]  355 	call	___fsmul
      000206 5B 08            [ 2]  356 	addw	sp, #8
      000208 1F 50            [ 2]  357 	ldw	(0x50, sp), x
      00020A 17 4E            [ 2]  358 	ldw	(0x4e, sp), y
      00020C 1E 50            [ 2]  359 	ldw	x, (0x50, sp)
      00020E 89               [ 2]  360 	pushw	x
      00020F 1E 50            [ 2]  361 	ldw	x, (0x50, sp)
      000211 89               [ 2]  362 	pushw	x
      000212 1E 68            [ 2]  363 	ldw	x, (0x68, sp)
      000214 89               [ 2]  364 	pushw	x
      000215 1E 68            [ 2]  365 	ldw	x, (0x68, sp)
      000217 89               [ 2]  366 	pushw	x
      000218 CDr00r00         [ 4]  367 	call	___fsadd
      00021B 5B 08            [ 2]  368 	addw	sp, #8
      00021D 1F 2C            [ 2]  369 	ldw	(0x2c, sp), x
      00021F 17 2A            [ 2]  370 	ldw	(0x2a, sp), y
      000221 16 2C            [ 2]  371 	ldw	y, (0x2c, sp)
      000223 17 28            [ 2]  372 	ldw	(0x28, sp), y
      000225 7B 2B            [ 1]  373 	ld	a, (0x2b, sp)
      000227 6B 27            [ 1]  374 	ld	(0x27, sp), a
      000229 7B 2A            [ 1]  375 	ld	a, (0x2a, sp)
      00022B A8 80            [ 1]  376 	xor	a, #0x80
      00022D 6B 26            [ 1]  377 	ld	(0x26, sp), a
                                    378 ;	PID.c: 54: / (2.0f * pid->tau + pid->T);
      00022F 1E 5C            [ 2]  379 	ldw	x, (0x5c, sp)
      000231 89               [ 2]  380 	pushw	x
      000232 1E 5C            [ 2]  381 	ldw	x, (0x5c, sp)
      000234 89               [ 2]  382 	pushw	x
      000235 1E 64            [ 2]  383 	ldw	x, (0x64, sp)
      000237 89               [ 2]  384 	pushw	x
      000238 1E 64            [ 2]  385 	ldw	x, (0x64, sp)
      00023A 89               [ 2]  386 	pushw	x
      00023B CDr00r00         [ 4]  387 	call	___fsadd
      00023E 5B 08            [ 2]  388 	addw	sp, #8
      000240 89               [ 2]  389 	pushw	x
      000241 90 89            [ 2]  390 	pushw	y
      000243 1E 2C            [ 2]  391 	ldw	x, (0x2c, sp)
      000245 89               [ 2]  392 	pushw	x
      000246 1E 2C            [ 2]  393 	ldw	x, (0x2c, sp)
      000248 89               [ 2]  394 	pushw	x
      000249 CDr00r00         [ 4]  395 	call	___fsdiv
      00024C 5B 08            [ 2]  396 	addw	sp, #8
      00024E 1F 24            [ 2]  397 	ldw	(0x24, sp), x
      000250 17 22            [ 2]  398 	ldw	(0x22, sp), y
      000252 1E 40            [ 2]  399 	ldw	x, (0x40, sp)
      000254 16 24            [ 2]  400 	ldw	y, (0x24, sp)
      000256 EF 02            [ 2]  401 	ldw	(0x2, x), y
      000258 16 22            [ 2]  402 	ldw	y, (0x22, sp)
      00025A FF               [ 2]  403 	ldw	(x), y
                                    404 ;	PID.c: 60: pid->out = proportional + pid->integrator + pid->differentiator;
      00025B 1E 6C            [ 2]  405 	ldw	x, (0x6c, sp)
      00025D 1C 00 34         [ 2]  406 	addw	x, #0x0034
      000260 1F 20            [ 2]  407 	ldw	(0x20, sp), x
      000262 1E 2E            [ 2]  408 	ldw	x, (0x2e, sp)
      000264 90 93            [ 1]  409 	ldw	y, x
      000266 90 EE 02         [ 2]  410 	ldw	y, (0x2, y)
      000269 FE               [ 2]  411 	ldw	x, (x)
      00026A 90 89            [ 2]  412 	pushw	y
      00026C 89               [ 2]  413 	pushw	x
      00026D 1E 78            [ 2]  414 	ldw	x, (0x78, sp)
      00026F 89               [ 2]  415 	pushw	x
      000270 1E 78            [ 2]  416 	ldw	x, (0x78, sp)
      000272 89               [ 2]  417 	pushw	x
      000273 CDr00r00         [ 4]  418 	call	___fsadd
      000276 5B 08            [ 2]  419 	addw	sp, #8
      000278 1F 1E            [ 2]  420 	ldw	(0x1e, sp), x
      00027A 1E 24            [ 2]  421 	ldw	x, (0x24, sp)
      00027C 89               [ 2]  422 	pushw	x
      00027D 1E 24            [ 2]  423 	ldw	x, (0x24, sp)
      00027F 89               [ 2]  424 	pushw	x
      000280 1E 22            [ 2]  425 	ldw	x, (0x22, sp)
      000282 89               [ 2]  426 	pushw	x
      000283 90 89            [ 2]  427 	pushw	y
      000285 CDr00r00         [ 4]  428 	call	___fsadd
      000288 5B 08            [ 2]  429 	addw	sp, #8
      00028A 1F 1A            [ 2]  430 	ldw	(0x1a, sp), x
      00028C 1E 20            [ 2]  431 	ldw	x, (0x20, sp)
      00028E 7B 1B            [ 1]  432 	ld	a, (0x1b, sp)
      000290 E7 03            [ 1]  433 	ld	(0x3, x), a
      000292 7B 1A            [ 1]  434 	ld	a, (0x1a, sp)
      000294 E7 02            [ 1]  435 	ld	(0x2, x), a
      000296 FF               [ 2]  436 	ldw	(x), y
                                    437 ;	PID.c: 62: if (pid->out > pid->limMax) {
      000297 1E 20            [ 2]  438 	ldw	x, (0x20, sp)
      000299 E6 03            [ 1]  439 	ld	a, (0x3, x)
      00029B 6B 17            [ 1]  440 	ld	(0x17, sp), a
      00029D E6 02            [ 1]  441 	ld	a, (0x2, x)
      00029F 6B 16            [ 1]  442 	ld	(0x16, sp), a
      0002A1 FE               [ 2]  443 	ldw	x, (x)
      0002A2 1F 14            [ 2]  444 	ldw	(0x14, sp), x
      0002A4 1E 6C            [ 2]  445 	ldw	x, (0x6c, sp)
      0002A6 E6 17            [ 1]  446 	ld	a, (0x17, x)
      0002A8 6B 13            [ 1]  447 	ld	(0x13, sp), a
      0002AA E6 16            [ 1]  448 	ld	a, (0x16, x)
      0002AC 6B 12            [ 1]  449 	ld	(0x12, sp), a
      0002AE EE 14            [ 2]  450 	ldw	x, (0x14, x)
      0002B0 1F 10            [ 2]  451 	ldw	(0x10, sp), x
      0002B2 1E 1A            [ 2]  452 	ldw	x, (0x1a, sp)
      0002B4 89               [ 2]  453 	pushw	x
      0002B5 90 89            [ 2]  454 	pushw	y
      0002B7 1E 16            [ 2]  455 	ldw	x, (0x16, sp)
      0002B9 89               [ 2]  456 	pushw	x
      0002BA 1E 16            [ 2]  457 	ldw	x, (0x16, sp)
      0002BC 89               [ 2]  458 	pushw	x
      0002BD CDr00r00         [ 4]  459 	call	___fslt
      0002C0 5B 08            [ 2]  460 	addw	sp, #8
      0002C2 6B 0F            [ 1]  461 	ld	(0x0f, sp), a
      0002C4 27 0B            [ 1]  462 	jreq	00109$
                                    463 ;	PID.c: 64: pid->out = pid->limMax;
      0002C6 1E 20            [ 2]  464 	ldw	x, (0x20, sp)
      0002C8 16 12            [ 2]  465 	ldw	y, (0x12, sp)
      0002CA EF 02            [ 2]  466 	ldw	(0x2, x), y
      0002CC 16 10            [ 2]  467 	ldw	y, (0x10, sp)
      0002CE FF               [ 2]  468 	ldw	(x), y
      0002CF 20 2E            [ 2]  469 	jra	00110$
      0002D1                        470 00109$:
                                    471 ;	PID.c: 66: } else if (pid->out < pid->limMin) {
      0002D1 16 6C            [ 2]  472 	ldw	y, (0x6c, sp)
      0002D3 17 0D            [ 2]  473 	ldw	(0x0d, sp), y
      0002D5 93               [ 1]  474 	ldw	x, y
      0002D6 E6 13            [ 1]  475 	ld	a, (0x13, x)
      0002D8 6B 0C            [ 1]  476 	ld	(0x0c, sp), a
      0002DA E6 12            [ 1]  477 	ld	a, (0x12, x)
      0002DC 6B 0B            [ 1]  478 	ld	(0x0b, sp), a
      0002DE EE 10            [ 2]  479 	ldw	x, (0x10, x)
      0002E0 1F 09            [ 2]  480 	ldw	(0x09, sp), x
      0002E2 1E 0B            [ 2]  481 	ldw	x, (0x0b, sp)
      0002E4 89               [ 2]  482 	pushw	x
      0002E5 1E 0B            [ 2]  483 	ldw	x, (0x0b, sp)
      0002E7 89               [ 2]  484 	pushw	x
      0002E8 1E 1A            [ 2]  485 	ldw	x, (0x1a, sp)
      0002EA 89               [ 2]  486 	pushw	x
      0002EB 1E 1A            [ 2]  487 	ldw	x, (0x1a, sp)
      0002ED 89               [ 2]  488 	pushw	x
      0002EE CDr00r00         [ 4]  489 	call	___fslt
      0002F1 5B 08            [ 2]  490 	addw	sp, #8
      0002F3 4D               [ 1]  491 	tnz	a
      0002F4 27 09            [ 1]  492 	jreq	00110$
                                    493 ;	PID.c: 68: pid->out = pid->limMin;
      0002F6 1E 20            [ 2]  494 	ldw	x, (0x20, sp)
      0002F8 16 0B            [ 2]  495 	ldw	y, (0x0b, sp)
      0002FA EF 02            [ 2]  496 	ldw	(0x2, x), y
      0002FC 16 09            [ 2]  497 	ldw	y, (0x09, sp)
      0002FE FF               [ 2]  498 	ldw	(x), y
      0002FF                        499 00110$:
                                    500 ;	PID.c: 73: pid->prevError       = error;
      0002FF 1E 38            [ 2]  501 	ldw	x, (0x38, sp)
      000301 16 70            [ 2]  502 	ldw	y, (0x70, sp)
      000303 EF 02            [ 2]  503 	ldw	(0x2, x), y
      000305 16 6E            [ 2]  504 	ldw	y, (0x6e, sp)
      000307 FF               [ 2]  505 	ldw	(x), y
                                    506 ;	PID.c: 74: pid->prevMeasurement = measurement;
      000308 1E 66            [ 2]  507 	ldw	x, (0x66, sp)
      00030A 16 80            [ 2]  508 	ldw	y, (0x80, sp)
      00030C EF 02            [ 2]  509 	ldw	(0x2, x), y
      00030E 16 7E            [ 2]  510 	ldw	y, (0x7e, sp)
      000310 FF               [ 2]  511 	ldw	(x), y
                                    512 ;	PID.c: 77: return pid->out;
      000311 1E 20            [ 2]  513 	ldw	x, (0x20, sp)
      000313 90 93            [ 1]  514 	ldw	y, x
      000315 90 EE 02         [ 2]  515 	ldw	y, (0x2, y)
      000318 FE               [ 2]  516 	ldw	x, (x)
      000319 51               [ 1]  517 	exgw	x, y
                                    518 ;	PID.c: 79: }
      00031A 5B 75            [ 2]  519 	addw	sp, #117
      00031C 81               [ 4]  520 	ret
                                    521 	.area CODE
                                    522 	.area CONST
                                    523 	.area INITIALIZER
                                    524 	.area CABS (ABS)
